# -*- coding: utf-8 -*-
"""Assignment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R4jw-1EFwAKfVSeSATdsYz2-cWcZ-UIV
"""

import pandas as pd

"""AAdding the file"""

df = pd.read_csv('/content/drive/MyDrive/healthcare insurance Anyalsis.csv')

df.dropna(inplace=True)

"""Implement the missing data"""

# Handle missing values (if any)
df.dropna(inplace=True)

# Convert categorical variables to numerical

df['smoker'] = df['smoker'].map({'yes': 1, 'no': 0})


# Create age groups
df['age_group'] = pd.cut(df['age'], bins=[18, 25, 35, 45, 55, 65, 100], labels=['18-25', '26-35', '36-45', '46-55', '56-65', '65+'])

# Display the transformed DataFrame
print(df.head())

df.to_csv('transformed_insurance.csv', index=False)

import pandas as pd
import unittest

class TestETLJob(unittest.TestCase):

    def setUp(self):
        # Load the dataset for testing
        self.df = pd.read_excel('/content/drive/MyDrive/healthcare insurance Anyalsis.csv')
        self.df.dropna(inplace=True)
        self.df['sex'] = self.df['sex'].map({'male': 0, 'female': 1})
        self.df['smoker'] = self.df['smoker'].map({'yes': 1, 'no': 0})
        self.df = pd.get_dummies(self.df, columns=['region'], drop_first=True)
        self.df['age_group'] = pd.cut(self.df['age'], bins=[18, 25, 35, 45, 55, 65, 100], labels=['18-25', '26-35', '36-45', '46-55', '56-65', '65+'])

    def test_no_missing_values(self):
        # Test for missing values
        self.assertFalse(self.df.isnull().values.any(), "DataFrame contains null values")

    def test_correct_categorical_encoding(self):
        # Test if categorical variables are correctly encoded
        self.assertTrue(set(self.df['sex'].unique()).issubset({0, 1}), "Sex column is not correctly encoded")
        self.assertTrue(set(self.df['smoker'].unique()).issubset({0, 1}), "Smoker column is not correctly encoded")

# Save the transformed DataFrame to a CSV file
transformed_file_path = '/content/drive/MyDrive/transformed_healthcare_insurance.csv'
df.to_csv(transformed_file_path, index=False)

assert df.isnull().sum().sum() == 0, "There are missing values in the dataset"

"""Data Quality Checks: Implement data quality checks like checking for null values or verifying the transformation logic output

Check for Null Values
"""

import pandas as pd

# Load the dataset
file_path = '/content/drive/MyDrive/healthcare insurance.xlsx'
df = pd.read_excel(file_path)

# Check for null values
null_values = df.isnull().sum()
print("Null values in each column:")
print(null_values)

# Optionally, drop rows with null values or fill them with appropriate values
# Dropping rows with null values
df.dropna(inplace=True)

# Alternatively, fill null values with mean/median/mode or a specific value
# df.fillna(df.mean(), inplace=True)  # Fill numerical columns with mean
# df.fillna(df.median(), inplace=True)  # Fill numerical columns with median
# df.fillna('Unknown', inplace=True)  # Fill categorical columns with 'Unknown'

# Check again for null values after handling them
null_values_after = df.isnull().sum()
print("Null values after handling:")
print(null_values_after)

"""Verify Transformation Logic Output
Check Categorical Encoding:
"""

# Check encoding of 'smoker' column
print("Unique values in 'smoker' column:", df['smoker'].unique())

# Check one-hot encoding of 'region' column
print("Columns after one-hot encoding 'region':", df.columns)

# Check unique values in 'age' column
print("Unique values in 'age' column:", df['age'].unique())

# Verify the age  distribution
print(df['age'].value_counts())

"""Example of a Data Quality Check Report
Generate a report summarizing the results of the data quality checks.
"""

def generate_quality_check_report(df):
    report = {}

    # Check for null values
    null_values = df.isnull().sum()
    report['null_values'] = null_values.to_dict()

    # Check categorical encoding

    report['smoker_encoding'] = list(df['smoker'].unique())

    # Check new features
    report['age'] = list(df['age'].unique())


    return report

quality_check_report = generate_quality_check_report(df)
print(quality_check_report)

"""SQL Quries to Anyalize the Data"""

import sqlite3

# Create a SQLite database and table
conn = sqlite3.connect('healthcare_insurance.db')
df.to_sql('insurance', conn, if_exists='replace', index=False)

# Create a cursor object
cur = conn.cursor()

# Example SQL Queries
# 1. State-wise Plan Distribution and Cost Analysis
cur.execute("""
SELECT address,
       COUNT(*) as number_of_plans,
       AVG(charges) as avg_cost
FROM insurance
GROUP BY address
ORDER BY avg_cost DESC;
""")
print(cur.fetchall())

# 2. Age Group-wise Cost Analysis
cur.execute("""
SELECT age_group,
       AVG(charges) as avg_cost
FROM insurance
GROUP BY age_group
ORDER BY avg_cost DESC;
""")
print(cur.fetchall())

# 3. Impact of Smoking and Sex on Charges
cur.execute("""
SELECT smoker,
       AVG(charges) as avg_cost

FROM insurance
GROUP BY smoker
ORDER BY avg_cost DESC;
""")
print(cur.fetchall())